<?php

// $Id$

/**
 * @file
 *
 * Implements hooks and callbacks for this module.
 */
module_load_include('inc', 'scholar', 'IrClass');

define('SCHOLAR_MODS_FORM_NAME', 'Scholar MODS Form');

/**
 * Constants Permission/Menu/Theme
 */
define('PERM_SCHOLAR_VIEW_RESEARCH', 'view scholarly research');
define('PERM_SCHOLAR_ADD_RESEARCH', 'add scholarly research');
define('MENU_SCHOLAR_HOME', 'ir');
define('MENU_SCHOLAR_SEARCH', 'ir/search/%/%/%');
define('MENU_SCHOLAR_BROWSE_USER', 'ir/user/%');
define('MENU_SCHOLAR_BROWSE_DEPARTMENT', 'ir/department/%');
define('MENU_SCHOLAR_ADMIN_SETTINGS', 'admin/settings/institutional_repository');
define('THEME_SCHOLAR_HOME', 'ir_home');
define('THEME_SCHOLAR_RECORD', 'ir_record');
define('THEME_SCHOLAR_SEARCH', 'ir_search');
define('THEME_SCHOLAR_BROWSE_USER', 'ir_browse_by_name');
define('THEME_SCHOLAR_BROWSE_DEPARTMENT', 'ir_browse_by_department');
define('THEME_SCHOLOR_OVERVIEW_PANEL_CITATION', 'scholar_overview_panel_citation');
define('VAR_SCHOLAR_SEARCH_FIELD_TITLE', 'scholar_search_title_field');
define('VAR_SCHOLAR_SEARCH_FIELD_AUTHOR', 'scholar_search_author_field');
define('VAR_SCHOLAR_SEARCH_FIELD_TEXT', 'scholar_search_text_field');
define('VAR_SCHOLAR_SEARCH_FIELD_USER', 'scholar_search_user_field');

/**
 * Implements Menu Hook. Registers Menus.
 */
function scholar_menu() {
  $items = array();
  $items[MENU_SCHOLAR_HOME] = array(
    'title' => 'Institutional Repository',
    'page callback' => 'scholar_home',
    'type' => MENU_NORMAL_ITEM,
    'access callback' => 'user_access',
    'access arguments' => array(PERM_SCHOLAR_VIEW_RESEARCH),
  );
  $items[MENU_SCHOLAR_SEARCH] = array(
    'title' => 'Institutional Repository',
    'page callback' => 'scholar_search',
    'access callback' => 'user_access',
    'page arguments' => array(2, 3, 4),
    'type' => MENU_CALLBACK,
    'access arguments' => array(PERM_SCHOLAR_VIEW_RESEARCH),
  );
  $items[MENU_SCHOLAR_BROWSE_DEPARTMENT] = array(
    'title' => 'Institutional Repository By Department',
    'page callback' => 'scholar_role',
    'access callback' => 'user_access',
    'type' => MENU_CALLBACK,
    'access arguments' => array(PERM_SCHOLAR_VIEW_RESEARCH),
  );
  $items[MENU_SCHOLAR_BROWSE_USER] = array(
    'title' => 'Institutional Repository By User Name',
    'page callback' => 'scholar_by_name',
    'access callback' => 'user_access',
    'type' => MENU_CALLBACK,
    'access arguments' => array(PERM_SCHOLAR_VIEW_RESEARCH),
  );
  $items[MENU_SCHOLAR_ADMIN_SETTINGS] = array(
    'title' => t('Institutional Repository'),
    'description' => t('Configure Settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('scholar_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'scholar.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements Permissions Hook.
 * 
 * Valid permissions for this module.
 * 
 * @return array 
 *   An array of valid permissions for the IR module.
 */
function scholar_perm() {
  return array(PERM_SCHOLAR_VIEW_RESEARCH, PERM_SCHOLAR_ADD_RESEARCH);
}

/**
 * Implements Hook Theme. Registers themes.
 *
 * @return array
 */
function scholar_theme() {
  return array(
    THEME_SCHOLAR_HOME => array(
      'template' => 'templates/Home',
    ),
    THEME_SCHOLAR_RECORD => array(
      'arguments' => array('pid' => NULL),
      'template' => 'templates/Record',
    ),
    THEME_SCHOLAR_SEARCH => array(
      'template' => 'templates/Search',
    ),
    THEME_SCHOLAR_BROWSE_USER => array(
      'template' => 'templates/BrowseName',
    ),
    THEME_SCHOLAR_BROWSE_DEPARTMENT => array(
      'template' => 'templates/BrowseDepartment',
    ),
    THEME_SCHOLOR_OVERVIEW_PANEL_CITATION => array(
      'template' => 'templates/CitationModel',
      'file' => 'CitationModel.inc',
      'arguments' => array('pid' => NULL)
    )
  );
}

/**
 * Hook for register_content_models_for_viewer
 * 
 * @return array
 */
function scholar_register_content_models_for_viewer() {
  $models = array();
  $models['ir:citationCModel'] = array(
    'type' => 'inc',
    'module' => 'scholar',
    'file' => 'CitationModel',
    'class' => 'CitationModel'
  );
  return $models;
}

/**
 * Implements the Theme Hook function for the ir_home theme.
 *
 * @param $variables
 */
function template_preprocess_ir_home(array &$variables) {
  $path = drupal_get_path('module', 'scholar');
  drupal_add_css("$path/css/Home.css");
  $variables['browse_by_user'] = db_result(db_query("SELECT COUNT(uid) FROM {users} WHERE uid > 1")) > 0;
  $variables['browse_by_department'] = TRUE;
}

/**
 * Implements the Theme Hook function for the ir_record theme.
 *
 * @param $variables
 */
function template_preprocess_ir_record(array &$variables) {
  module_load_include('inc', 'Fedora_Repository', 'api/fedora_item');
  drupal_add_css(drupal_get_path('module', 'scholar') . '/css/Record.css');
  $pid = $variables['pid'];
  $item = new Fedora_Item($pid);
  foreach ($item->datastreams as $dsid => $attributes) {
    $view = 'fedora/repository/' . $pid . '/' . $dsid;
    $download = 'fedora/repository/object_download/' . $pid . '/' . $dsid;
    $variables['rows'][] = array($attributes['label'], l(t('View'), $view), l(t('Download'), $download), $attributes['MIMEType']);
  }
}

/**
 * Implements the Theme Hook function for the ir_record theme.
 *
 * @param $variables
 */
function template_preprocess_ir_search(array &$variables) {
  drupal_add_css(drupal_get_path('module', 'scholar') . '/css/Search.css');
}

/**
 * Menu callback for 'fedorair/ir_edit_refworks'
 * 
 * Renders the Home Page.
 * 
 * @return string
 *   HTML for Institutional Repository Home Page.
 */
function scholar_home() {
  module_load_include('inc', 'scholar', 'SearchForm');
  module_load_include('inc', 'scholar', 'BrowseByUserForm');
  return theme(THEME_SCHOLAR_HOME);
}

/**
 * Renders the Search page.
 * 
 * @param string $field
 * @param string $order 
 *  
 * @return string
 */
function scholar_search($field, $order, $value) {
  module_load_include('inc', 'scholar', 'SearchForm');
  module_load_include('inc', 'islandora_solr_search', 'IslandoraSolrQueryProcessor');
  //$url = variable_get('islandora_solr_search_block_url', 'http://localhost:8080/solr');
  //$components = parse_url($url);
  $query = $value;
  $fq = NULL;
  $dismax = NULL;
  try {
    var_dump($components);
    $solr = new IslandoraSolrQueryProcessor();
    $results = $solr->buildAndExecuteQuery($query, $fq, $dismax); // XML
    if (empty($results)) {
      throw new Exception(t('solr index. Is the solr search block configured properly?'));
    }
  } catch (Exception $e) {
    unset($results);
    drupal_set_message(t('Error searching ') . $e->getMessage(), 'error');
  }
  if (isset($results))
    var_dump($results);
  return theme(THEME_SCHOLAR_SEARCH);
}

/**
 * Menu callback for 'fedorair/ir_edit_refworks' 
 * 
 * @param string $pid
 * 
 * @return string
 *   HTML Rendering of the drupal form.
 */
function scholar_edit_refworks($pid) {
  module_load_include('inc', 'scholar', 'RefworksForm');
  return drupal_get_form('scholar_refworks_form', $pid);
}

/**
 * Menu callback for 'fedorair/ir_full_record'
 * 
 * Renders the full record this object.
 * 
 * @param string $pid
 * 
 * @return string
 *   HTML
 */
function scholar_full_record($pid) {
  return theme(THEME_SCHOLAR_RECORD, $pid);
}

/**
 * Builds a drupal form for adding a new datastream.
 * 
 * @todo determine if this is called from anywhere.
 * 
 * @param array $form_state
 * @param string $pid
 * 
 * @return array 
 */
function scholar_add_ir_datastream_form(array $form_state, $pid) {
  $datastream_form = new IrClass();
  return $datastream_form->build_add_datastream_form($pid);
}

/**
 * Submit hook for the add datasteam form.
 * 
 * @param array $form
 * @param array $form_state 
 */
function scholar_add_ir_datastream_form_submit(array $form, array &$form_state) {
  $ir = new IrClass();
  $ir->addStreamFormSubmit($form_state['values']['form_id'], $form_state['values']);
}

/**
 * Menu callbacke for 'fedorair/ir_create_roles_for_users'
 * 
 * @todo determine what this function does.
 * 
 * @return string
 */
function scholar_create_roles_for_users() {
  $irClass = new IrClass();
  $irClass->get_and_create_roles();
  return 'created roles and associated users.';
}

/**
 * Implements Settings Page Hook.
 * 
 * Currently this does nothing.
 */
function fedora_repository_scholar_settings_page() {
  
}

/**
 * Implements Form Alter Hook.
 * 
 * Alters the fedora_repository ingest form. It modifies the description of the datastream upload field so that it only
 * references 'Ref Works' documents.
 * 
 * @param array $form
 * @param array $form_state 
 */
function scholar_form_fedora_repository_ingest_form_alter(array &$form, array &$form_state) {
  array_unshift($form['#validate'], 'validation_for_refworks');
  $form['indicator']['ingest-file-location']['#title'] = t('Upload Refworks Document');
  $form['indicator']['ingest-file-location']['#description'] = t('Upload refworks xml document containing one or more records.');
}

/**
 * Implements a validation hook for the fedora_repository ingest form.
 * 
 * Ensures that a file is uploaded and it is of the correct type.
 * 
 * @param array $form
 * @param array $form_state
 */
function validation_for_refworks(array $form, array &$form_state) {
  if ($form_state['clicked_button']['#id'] == 'edit-submit') {
    switch ($form_state['storage']['step']) {
      case 1:
        $form_state['rebuild'] = TRUE;
        break;
      case 2:
// Get the uploaded file.
        $validators = array();
        if (!empty($_FILES['files']['name']['pdf-file-location'])) {
          $fileObject = file_save_upload('pdf-file-location', $validators);
          file_move($fileObject->filepath, 0, 'FILE_EXISTS_RENAME');
          $form_state['values']['pdf-file-location'] = $fileObject->filepath;
        }
        if (file_exists($form_state['values']['pdf-file-location'])) {
          $file = $form_state['values']['pdf-file-location'];
          $extention = strtolower(pathinfo($file, PATHINFO_EXTENSION));
          if ($extention != 'pdf') {
            form_set_error('pdf-file-location', t("$file does not appear to be a valid PDF."));
            file_delete($file);
            return;
          }
        }
        $form_state['rebuild'] = FALSE;
        break;
    }
  }
}

/**
 * Implementation of hook_form_alter() alters the content_model_viewer_ingest_metadata_form to make it more user friendly
 * in the context of the presence of the build ingest form.
 * 
 * @param array $form
 *   The Drupal form.
 * @param array $form_state 
 *   The Drupal form state.
 */
function scholar_form_content_model_viewer_ingest_metadata_form_alter(array &$form, array &$form_state) {
  if ($form_state['storage']['step'] == 1) {
    $bulk_ingest = scholar_bulk_ingest_form($form_state, $form['collection_pid']['#value']);
    // Move the next button within the field set to make it clearer.
    $form['indicator']['submit'] = $form['submit'];
    unset($form['submit']);
    array_unshift($form, $bulk_ingest);
    $form['#attributes'] = array('enctype' => 'multipart/form-data'); // Allow the uploading of files.
    $form['#validate'] = array('scholar_edit_metadata_form_validate');
  }
}

/**
 * Performs a bulk ingestion.
 * 
 * This is not meant to be called from drupal_get_form, 
 * this is a sub-form that part of the content_model_viewer_ingest_metadata
 * 
 * @param array $form_state
 *   The Drupal form state.
 * @param string $collection_pid 
 *   The pid of the collection we will ingest into.
 * 
 * @return array
 *   The Drupal form.
 */
function scholar_bulk_ingest_form(array &$form_state, $collection_pid) {
  $form = array(
    'bulk_ingest' => array(
      '#type' => 'fieldset',
      '#title' => t('Ingest digital objects generated by RIS/EndNote into collection_pid Step #1', array('collection_pid' => $collection_pid)),
      'file' => array(
        '#type' => 'file',
        '#title' => t('Upload "RIS" or "EndNote XML" Document'),
        '#description' => t('A RIS or EndNote XML document that will generate multiple digital objects on ingest. One for each record within the RIS or EndNote XML document.'),
        '#element_validate' => array('scholar_bulk_ingest_file_upload_validate'),
      ),
      'submit' => array(
        '#type' => 'submit',
        '#executes_submit_callback' => TRUE,
        '#submit' => array('scholar_bulk_ingest_form_submit'),
        '#value' => t('Ingest')
      ),
    )
  );
  return $form;
}

/**
 * Over writes the default 'content_model_viewer_edit_metadata_form_validate' function.
 * 
 * @param array $form
 *   The Drupal form.
 * @param array $form_state 
 *   The Drupal form state.
 */
function scholar_edit_metadata_form_validate(array &$form, array &$form_state) {
  $bulk_ingest_clicked = $form_state['clicked_button']['#value'] == t('Ingest');
  if(!$bulk_ingest_clicked) {
    if ($form_state['storage']['step'] == 1) {
      $form_state['storage']['step']++;
      $form_state['rebuild'] = TRUE;
    }
    else {
      module_load_include('inc', 'xml_form_api', 'XMLForm');
      $xml_form = new XMLForm($form_state);
      $xml_form->validate($form, $form_state);
    }
  }
}

/**
 * Makes sure the file was uploaded and is of the right type.
 * 
 * @param array $element
 *   The file upload field
 * @param array $form_state 
 *   The Drupal form state.
 */
function scholar_bulk_ingest_file_upload_validate(array $element, array &$form_state) {
  $bulk_ingest_clicked = $form_state['clicked_button']['#value'] == t('Ingest');
  $file_uploaded = isset($_FILES['files']['error']['file']) && $_FILES['files']['error']['file'] == 0;
  if ($bulk_ingest_clicked) {
    if (!$file_uploaded) {
      form_error($element, t('You must upload a "RIS" or "EndNote XML" document.'));
    }
    else { // Only support for one file.
      $mime_type = $_FILES['files']['type']['file'];
      $valid_types = array('text/xml', 'text/plain', 'application/x-research-info-systems');
      if (array_search($mime_type, $valid_types) === FALSE) {
        form_error($element, t('The upload file is not the correct type. You must upload a "RIS" or "EndNote XML" document.'));
      }
    }
  }
}

/**
 * Bulk Ingest object.
 * 
 * @param array $form
 *   The Drupal form.
 * @param array $form_state 
 *   The Drupal form state.
 */
function scholar_bulk_ingest_form_submit(array &$form, array &$form_state) {
  global $base_url;
  $collection_pid = $form_state['values']['collection_pid'];
  // Do some batch ingesting.
  
  // Finish batch ingesting.
  unset($form_state['storage']); // Return to the viewer.  
}