<?php

// $Id$

/**
 * @file
 *
 * Implements hooks and callbacks for this module.
 */
module_load_include('inc', 'scholar', 'IrClass');
/**
 * Constants
 */
define("PERM_SCHOLAR_VIEW_RESEARCH", 'view scholarly research');
define("PERM_SCHOLAR_ADD_RESEARCH", 'add scholarly research');

/**
 * Implements Menu Hook. Registers Menus.
 */
function scholar_menu() {
  $items = array();
  $items['fedorair/ir'] = array(
    'title' => 'Institutional Repository',
    'page callback' => 'scholar_home',
    'type' => MENU_NORMAL_ITEM,
    'access callback' => 'user_access',
    'access arguments' => array(PERM_SCHOLAR_VIEW_RESEARCH),
  );
  $items['fedorair/custom_search'] = array(
    'title' => 'Institutional Repository',
    'page callback' => 'scholar_custom_search',
    'access callback' => 'user_access',
    'type' => MENU_CALLBACK,
    'access arguments' => array(PERM_SCHOLAR_VIEW_RESEARCH),
  );
  /**
   * Not functional on islandscholar.ca 
    $items['fedorair/advanced_search'] = array(
    'title' => 'Institutional Repository Advanced Search',
    'page callback' => 'scholar_advanced_search',
    'access callback' => 'user_access',
    'type' => MENU_CALLBACK,
    'access arguments' => array(PERM_SCHOLAR_VIEW_RESEARCH),
    );
   */
  $items['fedorair/ir_role'] = array(
    'title' => 'Institutional Repository By Department',
    'page callback' => 'scholar_role',
    'access callback' => 'user_access',
    'type' => MENU_CALLBACK,
    'access arguments' => array(PERM_SCHOLAR_VIEW_RESEARCH),
  );
  $items['fedorair/ir_by_name'] = array(
    'title' => 'Institutional Repository By User Name',
    'page callback' => 'scholar_by_name',
    'access callback' => 'user_access',
    'type' => MENU_CALLBACK,
    'access arguments' => array(PERM_SCHOLAR_VIEW_RESEARCH),
  );
  $items['fedorair/ir_full_record'] = array(
    'title' => 'Citation',
    'page callback' => 'scholar_full_record',
    'access callback' => 'user_access',
    'type' => MENU_CALLBACK,
    'access arguments' => array(PERM_SCHOLAR_VIEW_RESEARCH),
  );
  $items['fedorair/ir_edit_refworks'] = array(
    'title' => 'Edit Metadata',
    'page callback' => 'scholar_edit_refworks',
    'access callback' => 'user_access',
    'type' => MENU_CALLBACK,
    'access arguments' => array(PERM_SCHOLAR_ADD_RESEARCH),
  );
  $items['fedorair/ir_create_roles_for_users'] = array(
    'title' => 'Edit Metadata',
    'page callback' => 'scholar_create_roles_for_users',
    'access callback' => 'user_access',
    'type' => MENU_CALLBACK,
    'access arguments' => array(PERM_SCHOLAR_ADD_RESEARCH),
  );
  return $items;
}

/**
 * Implements Hook Theme. Registers themes.
 *
 * @return array
 */
function scholar_theme() {
  return array(
    'ir_home' => array(
      'template' => 'templates/Home',
    ),
    'ir_record' => array(
      'arguments' => array('pid' => NULL),
      'template' => 'templates/Record',
    ),
    'ir_custom_search' => array(
      'template' => 'templates/Search',
    ),
    'ir_browse_by_name' => array(
      'template' => 'templates/BrowseName',
    ),
    'ir_browse_by_department' => array(
      'template' => 'templates/BrowseDepartment',
    )
  );
}

/**
 * Implements the Theme Hook function for the ir_home theme.
 *
 * @param $variables
 */
function template_preprocess_ir_home(array &$variables) {
  $path = drupal_get_path('module', 'scholar');
  drupal_add_css("$path/css/Home.css");
  $variables['browse_by_user'] = db_result(db_query("SELECT COUNT(uid) FROM users WHERE uid > 1")) > 0;
  $variables['browse_by_department'] = true;
}

/**
 * Implements the Theme Hook function for the ir_record theme.
 *
 * @param $variables
 */
function template_preprocess_ir_record(array &$variables) {
  module_load_include('inc', 'Fedora_Repository', 'api/fedora_item');
  drupal_add_css(drupal_get_path('module', 'scholar') . '/css/Record.css');
  $pid = $variables['pid'];
  $item = new Fedora_Item($pid);
  foreach ($item->datastreams as $dsid => $attributes) {
    $view = 'fedora/repository/' . $pid . '/' . $dsid;
    $download = 'fedora/repository/object_download/' . $pid . '/' . $dsid;
    $variables['rows'][] = array($attributes['label'], l(t('View'), $view), l(t('Download'), $download), $attributes['MIMEType']);
  }
}

/**
 * Menu callback for 'fedorair/ir_edit_refworks'
 * 
 * Renders the Home Page.
 * 
 * @return string
 *   HTML for Institutional Repository Home Page.
 */
function scholar_home() {
  module_load_include('inc', 'scholar', 'QuickSearchForm');
  module_load_include('inc', 'scholar', 'BrowseByUserForm');
  return theme('ir_home');
}

/**
 * Menu callback for 'fedorair/ir_edit_refworks' 
 * 
 * @param string $pid
 * 
 * @return string
 *   HTML Rendering of the drupal form.
 */
function scholar_edit_refworks($pid) {
  module_load_include('inc', 'scholar', 'RefworksForm');
  return drupal_get_form('scholar_refworks_form', $pid);
}

/**
 * Menu callback for 'fedorair/ir_full_record'
 * 
 * Renders the full record this object.
 * 
 * @param string $pid
 * 
 * @return string
 *   HTML
 */
function scholar_full_record($pid) {
  return theme('ir_record', $pid);
  /*
    //theme_fieldset($element)
    global $user;
    module_load_include('inc', 'Fedora_Repository', 'ObjectHelper');
    $objectHelper = new ObjectHelper();
    $refworksRecord = $objectHelper->getStream($pid, 'refworks', 1);
    $path = drupal_get_path('module', 'scholar');
    $proc = null;
    if (!$refworksRecord) {
    drupal_set_message(t('No Results for refworks record!'));
    return ' '; //no results
    }

    try {
    $proc = new XsltProcessor();
    } catch (Exception $e) {
    drupal_set_message(t('Error loading results xslt! ') . $e->getMessage());
    return ' ';
    }

    //inject into xsl stylesheet
    $proc->setParameter('', 'pid', $pid); //needed in our xsl
    $proc->setParameter('', 'objectsPage', base_path());
    $xsl = new DomDocument();

    $test = $xsl->load($path . '/xsl/refworks.xsl');
    if (!isset($test)) {
    drupal_set_message(t('Error loading refworks xslt!'));
    return t('Error loading search results xslt! ');
    }

    $input = new DomDocument();
    $didLoadOk = $input->loadXML($refworksRecord);
    $status = $input->getElementsByTagName('status');
    $status = $status->item(0)->nodeValue;

    if (!isset($didLoadOk)) {
    drupal_set_message(t('Error loading search results!'));
    return t('Error loading search results! ');
    }
    else {

    $proc->importStylesheet($xsl);

    $newdom = $proc->transformToDoc($input);

    $output .= $newdom->saveXML();
    }
    //we should change this to only show the form if the user can actually edit it
    //we know the user and we have the refworks record so should be doable
    if (0 < $user->uid && ('NO_OBJ' == $status || $status == null)) { //show the author stuff
    $status = "test";
    $output .= '<br />';
    module_load_include('inc', 'Fedora_Repository', 'plugins/ShowStreamsInFieldSets');
    $romeo = new ShowStreamsInFieldSets($pid);
    $output .= $romeo->showRomeo();
    $output .= '<br />';
    $output .= drupal_get_form('scholar_add_ir_datastream_form', $pid);
    }
    $object = $objectHelper->get_datastreams_list_asSimpleXML($pid);
    if (!isset($object)) {
    drupal_set_message(t("No datastreams available"));
    return ' ';
    }
    $hasOBJStream = null;
    $dataStreamBody = "<br /><table>\n";
    $dataStreamBody .= '<tr><th colspan="4"><h3>' . t("Technical Details") . '</h3></th></tr>';
    foreach ($object as $datastream) {
    foreach ($datastream as $datastreamValue) {
    if ($datastreamValue->ID == 'OBJ') {
    $hasOBJStream = '1';
    $mainStreamLabel = $datastreamValue->label;
    $mainStreamLabel = str_replace("_", " ", $mainStreamLabel);
    }
    //create the links to each datastream
    $dataStreamBody .= $objectHelper->create_link_for_ds($pid, $datastreamValue); //"<tr><td><b>$key :</b></td><td>$value</td></tr>\n";
    }
    }
    global $base_url;
    $dataStreamBody .= "</table>\n";
    if (0 < $user->uid) {
    $dataStreamBody.='<br /><a href="' . $base_url . '/fedorair/ir_edit_refworks/' . $pid . '">Edit Metadata</a>';
    $dataStreamBody.='<br /><a href="' . $base_url . '/fedora/repository/' . $pid . '">Manage Object</a>';
    }
    $fieldset = array(
    '#title' => t("Technical Details"
    ), '#collapsible' => TRUE, '#collapsed' => TRUE, '#value' => $dataStreamBody);
    $output .= '<br />' . theme('fieldset', $fieldset);
    //module_load_include('php', 'Fedora_Repository', 'plugins/ShowStreamsInFieldSets');
    //$romeo = new ShowStreamsInFieldSets($pid);
    //$output .= $romeo->showRomeo(true); //collapsed this time

    return $output; */
}

/**
 * Menu callback for 'fedorair/ir_role'
 * 
 * @todo Find out what this returns and what it accepts as parameters.
 * 
 * @param type $type
 * @param type $query
 * 
 * @return type 
 */
function scholar_role($type, $query) {
  $role = $query; //
  $irClass = new IrClass();
//real bad hack to change home economics and ohters to something different (ldap groups are incorrect in ldap server so they say)
  $department = $query;

  if ('Home Economics' == $department) {
    $department = 'Family and Nutritional Sciences';
  }
  else if ('Anatomy Physiology' == $department) {
    $department = 'Biomedical Sciences';
  }
  else if ('Womens Studies' == $department) {
    $department = "Women's Studies";
  }
  else if ('Path Micro' == $department) {
    $department = "Pathology and Microbiology";
  }
  else if ('Soc Anth' == $department) {
    $department = "Sociology and Anthropology";
  }
  $output = "<h4 align='center'>$department</h4>";
  $usersArray = array();

  $results = scholar_custom_search($type, $query, 0, 0, $usersArray);
  $output.='<center><table class="table-form"><tr>' . drupal_get_form('scholar_browse_by_user_form', $role, $usersArray) . '</tr></table></center>';

  return $output . $results;
}

/**
 * Builds a drupal form for adding a new datastream.
 * 
 * @todo determine if this is called from anywhere.
 * 
 * @param array $form_state
 * @param string $pid
 * 
 * @return array 
 */
function scholar_add_ir_datastream_form(array $form_state, $pid) {
  $datastream_form = new IrClass();
  return $datastream_form->build_add_datastream_form($pid);
}

/**
 * Submit hook for the add datasteam form.
 * 
 * @param array $form
 * @param array $form_state 
 */
function scholar_add_ir_datastream_form_submit(array $form, array &$form_state) {
  $ir = new IrClass();
  $ir->addStreamFormSubmit($form_state['values']['form_id'], $form_state['values']);
}

/**
 * Menu callbacke for 'fedorair/ir_create_roles_for_users'
 * 
 * @todo determine what this function does.
 * 
 * @return string
 */
function scholar_create_roles_for_users() {
  $irClass = new IrClass();
  $irClass->get_and_create_roles();
  return 'created roles and associated users.';
}

/**
 * Implements Permissions Hook.
 * 
 * Valid permissions for this module.
 * 
 * @return array 
 *   An array of valid permissions for the IR module.
 */
function scholar_perm() {
  return array(PERM_SCHOLAR_VIEW_RESEARCH, PERM_SCHOLAR_ADD_RESEARCH);
}

/**
 * Implements Uninstall Hook. 
 * 
 * Currently this does nothing.
 * 
 * @return boolean
 *   TRUE on success FALSE otherwise.
 */
function scholar_uninstall() {
  return true;
}

/**
 * Implements Settings Page Hook.
 * 
 * Currently this does nothing.
 */
function fedora_repository_scholar_settings_page() {
  
}

/**
 * Implements Form Alter Hook.
 * 
 * Alters the fedora_repository ingest form. It modifies the description of the datastream upload field so that it only
 * references 'Ref Works' documents.
 * 
 * @param array $form
 * @param array $form_state 
 */
function scholar_form_fedora_repository_ingest_form_alter(array &$form, array &$form_state) {
  array_unshift($form['#validate'], 'validation_for_refworks');
  $form['indicator']['ingest-file-location']['#title'] = t('Upload Refworks Document');
  $form['indicator']['ingest-file-location']['#description'] = t('Upload refworks xml document containing one or more records.');
}

/**
 * Implements a validation hook for the fedora_repository ingest form.
 * 
 * Ensures that a file is uploaded and it is of the correct type.
 * 
 * @param array $form
 * @param array $form_state
 */
function validation_for_refworks(array $form, array &$form_state) {
  if ($form_state['clicked_button']['#id'] == 'edit-submit') {
    switch ($form_state['storage']['step']) {
      case 1:
        $form_state['rebuild'] = TRUE;
        break;
      case 2:
// Get the uploaded file.
        $validators = array();
        if (!empty($_FILES['files']['name']['pdf-file-location'])) {
          $fileObject = file_save_upload('pdf-file-location', $validators);
          file_move($fileObject->filepath, 0, 'FILE_EXISTS_RENAME');
          $form_state['values']['pdf-file-location'] = $fileObject->filepath;
        }
        if (file_exists($form_state['values']['pdf-file-location'])) {
          $file = $form_state['values']['pdf-file-location'];
          $extention = strtolower(pathinfo($file, PATHINFO_EXTENSION));
          if ($extention != 'pdf') {
            form_set_error('pdf-file-location', t("$file does not appear to be a valid PDF."));
            file_delete($file);
            return;
          }
        }
        $form_state['rebuild'] = FALSE;
        break;
    }
  }
}