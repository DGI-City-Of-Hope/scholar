<?php

// $Id$

/**
 * @file
 *
 * Implements hooks and callbacks for this module.
 */

/**
 * An internal function that is not meant to be used outside of this file.
 * 
 * Executes the given command and the exit status and output of the command.
 * 
 * @param string $command
 *   The command to execute.
 * 
 * @return array
 *   Where the first parameter was the exit status of the command and the second is the commands output.
 */
function _bibutils_execute_command($command) {
  $return_value = FALSE;
  ob_start();
  passthru($command, $return_value);
  $output = ob_get_contents();
  ob_end_clean();
  return array($return_value, $output);
}

/**
 * An internal function that is not meant to be used outside of this file.
 * 
 * This function does the nuts and the bolts of the mods conversion.
 * 
 * @param string $command
 *   The command expected to return a MODS string to the standard output.
 * 
 * @return DOMDocument
 *   The generated MODS document, FALSE if the function failed.
 */
function _bibutils_convert_to_mods_document($command) {
  list($return_value, $output) = _bibutils_execute_command($command);
  $successful = $return_value === 0;
  if ($successful && !empty($output)) { // Successfully executed the command.
    $transform_filename = drupal_get_path('module', 'bibutils') . '/xsl/FixBibutilsModsOutput.xsl';
    $transform = new DOMDocument();
    $transform->load($transform_filename);
    $doc = new DOMDocument();
    $doc->loadXML($output);
    $xslt = new XSLTProcessor();
    $xslt->importStyleSheet($transform);
    return $xslt->transformToDoc($doc->documentElement);
  }
  else {
    drupal_set_message(t('Could not convert %filename, to MODS.', array('%filename' => $filename)), 'error');
  }
  return FALSE;
}

/**
 * An internal function that is not meant to be used outside of this file.
 * 
 * Generates a DOMDocument for each <mods> element within the given MODS document.
 * 
 * @param DOMDocument $mods 
 *   A Valid MODS Document.
 * 
 * @return DOMDocument[]
 *   An array of DOMDocuments that repersent each <mods> record within the <modsCollection>
 */
function _split_mods_collection_into_mulitiple_documents(DOMDocument $mods) {
  echo 'enter _split_mods_collection_into_mulitiple_documents ' . memory_get_usage(TRUE) . '</br>';
  $xpath = new DOMXPath($mods);
  $xpath->registerNamespace('mods', 'http://www.loc.gov/mods/v3');
  $results = $xpath->query('/mods:modsCollection/mods:mods');
  $documents = array();
  $count = $results->length;
  for ($i = 0; $i < $count; $i++) {
    $doc = new DOMDocument();
    $child = $results->item($i);
    $child->setAttribute('xmlns', 'http://www.loc.gov/mods/v3');
    $doc->loadXML($mods->saveXML($child));
    $documents[] = $doc;
  }
  echo 'exit _split_mods_collection_into_mulitiple_documents ' . memory_get_usage(TRUE) . '</br>';
  return $documents;
}

/**
 * Converts an Endnote XML document to a MODS document.
 * 
 * @param string $filename
 *   The filename of the EndNote XML document.
 * 
 * @return DOMDocument
 *   The generated MODS document, FALSE if the function failed.
 */
function bibutils_endnote_xml_file_to_mods_document($filename) {
  echo 'enter bibutils_endnote_xml_file_to_mods_document ' . memory_get_usage(TRUE) . '</br>';
  $command = 'endx2xml ' . $filename . ' 2>&- | modsclean 2>&-';
  $document = _bibutils_convert_to_mods_document($command);
  echo 'exit bibutils_endnote_xml_file_to_mods_document ' . memory_get_usage(TRUE) . '</br>';
  return $document;
}

/**
 * Converts an RIS document to a MODS document.
 * 
 * @param string $filename
 *   The filename of the RIS.
 * 
 * @return DOMDocument
 *   The generated MODS document, FALSE if the function failed.
 */
function bibutils_ris_file_to_mods_document($filename) {
  $command = 'ris2xml ' . $filename . ' 2>&- | modsclean 2>&-';
  return _bibutils_convert_to_mods_document($command);
}

/**
 * Converts an Endnote XML document to many MODS documents.
 *
 * Unlike "bibutils_endnote_xml_file_to_mods_document" function this functions splits the 
 * modsCollection's child elements into many separate documents.
 * 
 * @param string $filename
 *   The filename of the EndNote XML document.
 * 
 * @return DOMDocument[]
 *   An array of generated MODS documents, FALSE if the function failed.
 */
function bibutils_endnote_xml_file_to_mods_documents($filename) {
  echo 'enter bibutils_endnote_xml_file_to_mods_documents ' . memory_get_usage(TRUE) . '</br>';
  $mods = bibutils_endnote_xml_file_to_mods_document($filename);
  $documents = ($mods !== FALSE) ?
      _split_mods_collection_into_mulitiple_documents($mods) :
      FALSE;
  unset($mods);
  echo 'exit bibutils_endnote_xml_file_to_mods_documents ' . memory_get_usage(TRUE) . '</br>';
  return $documents;
}

/**
 * Converts an RIS document to many MODS documents.
 *
 * Unlike "bibutils_ris_file_to_mods_document" function this functions splits the 
 * modsCollection's child elements into many separate documents.
 * 
 * @param string $filename
 *   The filename of the EndNote XML document.
 * 
 * @return DOMDocument[]
 *   An array of generated MODS documents, FALSE if the function failed.
 */
function bibutils_ris_file_to_mods_documents($filename) {
  $mods = bibutils_ris_file_to_mods_document($filename);
  return ($mods !== FALSE) ?
      _split_mods_collection_into_mulitiple_documents($mods) :
      FALSE;
}