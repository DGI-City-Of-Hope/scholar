<?php

/**
 * @file
 *
 * Implements hooks and callbacks for this module.
 */
/**
 * Constants Permission/Menu/Theme
 */
define('MENU_BIBLIOGRAPHY_HOME', 'bibliography');
define('MENU_BIBLIOGRAPHY_CITATION', 'bibliography/citation');
define('MENU_BIBLIOGRAPHY_EXPORT', 'bibliography/export');
define('THEME_BIBLIOGRAPHY_FORM_TABLE', 'islandora_bibliography_form_table');

/**
 * The menu entries for this module.
 *
 * @return $menu_entries
 *   An arrray of the items to be added to the drupal menu
 */
function islandora_bibliography_menu() {
  $items = array();
  $items[MENU_BIBLIOGRAPHY_HOME] = array(
    'title' => 'My Bibliography',
    'description' => 'Here you can remove or export citations from your bibliography.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_bibliography_form'),
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items[MENU_BIBLIOGRAPHY_CITATION] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_bibliography_citation_form'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items[MENU_BIBLIOGRAPHY_EXPORT] = array(
    'page callback' => 'islandora_bibliography_export',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements Hook Theme. Registers themes.
 *
 * @return array
 */
function islandora_bibliography_theme() {
  return array(
    THEME_BIBLIOGRAPHY_FORM_TABLE => array(
      'arguments' => array('element' => NULL)
    )
  );
}

/**
 * Export many citations in a particular format and redirect the user to another page.
 */
function islandora_bibliography_export() {
  $filename = isset($_SESSION['bibliography']['export']['file']) ? $_SESSION['bibliography']['export']['file'] : NULL;
  $redirect = isset($_SESSION['bibliography']['export']['redirect']) ? $_SESSION['bibliography']['export']['redirect'] : NULL;
  if (file_exists($filename)) {
    $file_size = filesize($filename);
    header("Content-type: application/x-Research-Info-Systems");
    header("Content-length: $file_size");
    header("Content-Disposition: attachment; filename=\"results.ris\"");
    header("Cache-control: private");
    $curl_handle = curl_init();
    if ($curl_handle !== FALSE) {
      global $base_url;
      $url = $base_url . '/' . $filename;
      curl_setopt($curl_handle, CURLOPT_SSL_VERIFYPEER, FALSE);
      curl_setopt($curl_handle, CURLOPT_SSL_VERIFYHOST, FALSE);
      curl_setopt($curl_handle, CURLOPT_FAILONERROR, 1); // Fail on errors
      curl_setopt($curl_handle, CURLOPT_FOLLOWLOCATION, 1); // allow redirects
      curl_setopt($curl_handle, CURLOPT_USERAGENT, "Mozilla/4.0 pp(compatible; MSIE 5.01; Windows NT 5.0)");
      curl_setopt($curl_handle, CURLOPT_RETURNTRANSFER, 0); // return into a variable
      curl_setopt($curl_handle, CURLOPT_URL, $url);
    }
    curl_exec($curl_handle);
    curl_close($curl_handle);
  }
  unset($_SESSION['bibliography']['export']);
}

/**
 * This form is called from the menu callback for the 'My Bibliography' page.
 *
 * From here the user can add/remove and export citations.
 *
 * @global string $base_path
 *   The base path of the site.
 *
 * @param array $form_state
 *   The drupal form state.
 *
 * @return array
 *   The drupal form.
 */
function islandora_bibliography_form(array &$form_state) {
  global $base_path;
  drupal_add_css(drupal_get_path('module', 'islandora_bibliography') . '/css/bibliography.css');
  if (isset($_SESSION['bibliography']['export']['file'])) {
    $path = MENU_BIBLIOGRAPHY_EXPORT;
    drupal_set_html_head("<meta http-equiv='refresh' content='0;url=/$path'/>");
  }
  $pids = islandora_bibliography_get_citations();
  if (empty($pids)) {
    drupal_set_message(t('You have no citations in your bibliography.'));
    return array(
      'redirect' => array(
        '#prefix' => '<p>',
        '#value' => l(t('Return to the Home Page.'), ''),
        '#suffix' => '</p>'
      )
    );
  }
  else {
    module_load_include('inc', 'fedora_repository', 'api/fedora_item');
    $checkboxes = array_fill_keys($pids, '');
    $table = array(
      '#header' => array(theme('table_select_header_cell'), t('Title'), t('Author(s)'), ''),
      '#theme' => THEME_BIBLIOGRAPHY_FORM_TABLE,
      '#tree' => TRUE,
      'selections' => array(
        '#type' => 'checkboxes',
        '#options' => $checkboxes,
      ),
    );
    foreach ($pids as $pid) {
      $title = $authors = 'Missing';
      $item = new Fedora_Item($pid);
      if (isset($item->datastreams['MODS'])) {
        $mods = $item->get_datastream_dissemination('MODS');
        $mods = trim($mods);
        if (!empty($mods)) {
          $mods = new SimpleXMLElement($mods);
          $mods->registerXPathNamespace('mods', 'http://www.loc.gov/mods/v3');
          $title = implode(' ', $mods->xpath('/mods:mods/mods:titleInfo/mods:title'));
          $authors = implode(' ', $mods->xpath('/mods:mods/mods:name/mods:role[mods:roleTerm = "author"]/../mods:namePart[@type="family"]'));
        }
      }
      $table['rows'][] = array(
        '#pid' => $pid,
        'title' => array('#value' => check_plain($title)),
        'author' => array('#value' => check_plain($authors)),
        'remove' => array(
          '#type' => 'submit',
          '#value' => t('Remove'),
          '#pid' => $pid,
          '#submit' => array('islandora_bibliography_form_remove_citation_submit')
        )
      );
    }
    return array(
      'fieldset' => array(
        '#type' => 'fieldset',
        '#title' => t('My Citations'),
        '#description' => t('<p>Here you can remove or export citations from your bibliography.</p>'),
        'table' => $table,
        'preview_title' => array(
          '#value' => t('Preview Citations'),
          '#prefix' => '<h4>',
          '#suffix' => '</h4>'
        ),
        'preview_style' => array(
          '#title' => t('Style'),
          '#type' => 'select',
          '#options' => array(
            'apa.csl' => 'APA',
            'annotated.csl' => 'Annotated',
            'nih.csl' => 'NIH',
            'nlm.csl' => 'NLM',
          )
        ),
        'preview' => array(
          '#type' => 'submit',
          '#value' => t('Preview Selected'),
          '#submit' => array('islandora_bibliography_form_preview')
        ),
        'remove' => array(
          '#type' => 'submit',
          '#value' => t('Remove Selected'),
          '#submit' => array('islandora_bibliography_form_remove')
        ),
        'export_title' => array(
          '#value' => t('Export To File'),
          '#prefix' => '<h4>',
          '#suffix' => '</h4>'
        ),
        'format' => array(
          '#title' => t('Format'),
          '#type' => 'select',
          '#length' => 50,
          '#options' => array(
            'RIS' => 'RIS',
            'RTF' => 'RTF',
            'PDF' => 'PDF',
          )
        ),
        'style' => array(
          '#title' => t('Style'),
          '#type' => 'select',
          '#options' => array(
            'apa.csl' => 'APA',
            'annotated.csl' => 'Annotated',
            'nih.csl' => 'NIH',
            'nlm.csl' => 'NLM',
          )
        ),
        'export' => array(
          '#type' => 'submit',
          '#action' => 'export',
          '#export' => 'selected',
          '#value' => t('Export Selected'),
          '#submit' => array('islandora_bibliography_form_export')
        )
      )
    );
  }
}

/**
 * Removes one citation from the bibliography.
 *
 * @param array $form
 *   The drupal form.
 * @param array $form_state
 *   The drupal form state.
 */
function islandora_bibliography_form_remove_citation_submit(array $form, array &$form_state) {
  $pid = $form_state['clicked_button']['#pid'];
  islandora_bibliography_remove_citation($pid);
  drupal_set_message(t('Removed Citation'));
}

/**
 * Previews the selected citations from the bibliography.
 *
 * @param array $form
 *   The drupal form.
 * @param array $form_state
 *   The drupal form state.
 */
function islandora_bibliography_form_preview(array $form, array &$form_state) {
  $selections = $form_state['values']['table']['selections'];
  _islandora_bibliography_form_preview_selections($selections, $form_state['values']['preview_style']);
}

/**
 * Removes the selected citations from the bibliography.
 * 
 * @param array $form
 * @param array $form_state 
 */
function islandora_bibliography_form_remove(array $form, array &$form_state) {
  $selections = $form_state['values']['table']['selections'];
  _islandora_bibliography_form_remove_selections($selections);
}

/**
 * Exports the selected pids to file.
 * 
 * @param array $form
 * @param array $form_state 
 */
function islandora_bibliography_form_export(array $form, array &$form_state) {
  $selections = array_filter($form_state['values']['table']['selections']);
  $pids = array_keys($selections);
  $style_filename = drupal_get_path('module', 'citeproc') . '/data/' . $form_state['values']['style'];
  $style = citeproc_style($style_filename);
  islandora_bibliography_export_citations($pids, NULL, $form_state['values']['format']);
}

/**
 * Export the users selections.
 *
 * Helper function for islandora_bibliography_form_submit().
 *
 * @param array $selections
 *   The users selections, the keys are pids and the values indicated if it was selected.
 * @param string $style
 *   The name of the style file to use.
 */
function _islandora_bibliography_form_preview_selections(array $selections, $style) {
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  module_load_include('inc', 'citeproc', 'CiteProcBibliography');
  drupal_add_css(drupal_get_path('module', 'islandora_bibliography') . '/css/export.css');
  $style_filename = drupal_get_path('module', 'citeproc') . '/data/' . $style;
  $style = citeproc_style($style_filename);
  $bibliography = new CiteProcJSBibliography($style);
  $selections = array_filter($selections);
  foreach ($selections as $pid => $selected) {
    $item = new Fedora_Item($pid);
    if (isset($item->datastreams['MODS'])) {
      $mods = trim($item->get_datastream_dissemination('MODS'));
      if (!empty($mods)) {
        $doc = new DOMDocument();
        $doc->loadXML($mods);
        $citation = citeproc_citation_from_mods($doc);
        $bibliography->addCitation($citation);
      }
    }
  }
  $output = $bibliography->render();
  $output .= l(t('Return to the Bibliography.'), 'bibliography');
  print theme('page', $output, FALSE);
  exit();
}

/**
 * Remove the users selections from the bibliography.
 *
 * Helper function for islandora_bibliography_form_submit().
 *
 * @param array $selections
 *   The users selections, the keys are pids and the values indicated if it was selected.
 */
function _islandora_bibliography_form_remove_selections(array $selections) {
  $count = 0;
  foreach ($selections as $pid => $selected) {
    if ($selected) {
      islandora_bibliography_remove_citation($pid);
      $count++;
    }
  }
  drupal_set_message(t('Removed %num Citation(s)', array('%num' => $count)));
}

/**
 * Theme's a form table for this module.
 *
 * @param array $element
 *   A Drupal Form Element.
 *
 * @return sting
 *   HTML that renders a table of settings for datastreams.
 */
function theme_islandora_bibliography_form_table(array $element) {
  $rows = array();
  foreach (element_children($element['rows']) as $child) {
    $setting = $element['rows'][$child];
    $pid = $setting['#pid'];
    $fields = array(
      drupal_render($element['selections'][$pid]) // First field is a checkbox
    );
    foreach (element_children($setting) as $property) {
      $field = $setting[$property];
      $fields[] = drupal_render($field);
    }
    $rows[] = array(
      'data' => $fields,
      'class' => isset($setting['#attributes']['class']) ? $setting['#attributes']['class'] : NULL
    );
  }
  $attributes = isset($element['#id']) ? array('id' => $element['#id']) : NULL;
  return theme_table($element['#header'], $rows, $attributes);
}

/**
 * Renders the form for adding/removing an item from the bibliography.
 * 
 * @param array $form_state
 *   The drupal form state.
 * @param string $pid 
 *   The fedora object's pid.
 *  
 * @return array
 *   The drupal form.
 */
function islandora_bibliography_citation_form(array &$form_state, $pid = NULL) {
  $pid = isset($pid) ? $pid : $form_state['post']['pid'];
  $stored = isset($form_state['post']['stored']) ? $form_state['post']['stored'] : islandora_bibliography_is_citation_stored($pid);
  return array(
    '#action' => '/bibliography/citation',
    'pid' => array(
      '#type' => 'hidden',
      '#value' => $pid
    ),
    'stored' => array(
      '#type' => 'hidden',
      '#value' => $stored
    ),
    'action' => array(
      '#type' => 'submit',
      '#value' => $stored ? t('Remove from Bibliography') : t('Add to Bibliography'),
      '#action' => $stored ? 'remove' : 'add',
      '#pid' => $pid,
      '#redirect' => 'fedora/repository/' . $pid,
    )
  );
}

/**
 * Adds/Removes a Citation from the bibliography.
 * 
 * @param array $form
 *   The drupal form.
 * @param array $form_state 
 *   The drupal form state.
 */
function islandora_bibliography_citation_form_submit(array $form, array &$form_state) {
  $action = $form_state['clicked_button']['#action'];
  $pid = $form_state['clicked_button']['#pid'];
  ($action == 'add') ?
          islandora_bibliography_store_citation($pid) :
          islandora_bibliography_remove_citation($pid);
  $redirect = $form_state['clicked_button']['#redirect'];
  drupal_goto($redirect);
}

/**
 * Gets the the current user id if non is provided.
 *
 * @global object $user
 *   The drupal user object.
 *
 * @param int $uid
 *   A drupal user id.
 *
 * @return int
 *   A drupal user id.
 */
function _islandora_bibliography_get_uid($uid = NULL) {
  global $user;
  $uid = isset($uid) ? $uid : $user->uid;
  return $uid;
}

/**
 * Checks if the given user is anonymous.
 *
 * @param int $uid
 *   A drupal user id.
 *
 * @return boolean
 *   TRUE if the user identified by $uid is anonymous, FALSE otherwise.
 */
function _islandora_bibliography_is_user_anonymous($uid) {
  return $uid == 0;
}

/**
 * An internal function not mean to be called from outside this module.
 *
 * @param string $pid
 *   The citations object's pid.
 * @param int $uid
 *   The user who is storing the $pid.
 *
 * @return boolean
 *   TRUE if successfully stored in the database, FALSE otherwise.
 */
function _islandora_bibliography_store_pid_in_database($pid, $uid) {
  $record = new stdClass();
  $record->uid = (int) $uid;
  $record->pid = $pid;
  return drupal_write_record('islandora_bibliography', $record) !== FALSE;
}

/**
 * Stores the PID in the Session.
 *
 * @param string $pid
 *   The citations object's pid.
 */
function _islandora_bibliography_store_pid_in_session($pid) {
  $_SESSION['islandora_bibliography'] = isset($_SESSION['islandora_bibliography']) ? $_SESSION['islandora_bibliography'] : array();
  $_SESSION['islandora_bibliography'][$pid] = $pid;
  return TRUE;
}

/**
 * An internal function not mean to be called from outside this module.
 *
 * @param string $pid
 *   The citations object's pid.
 *
 * @param int $uid
 *   The user who is removing the $pid.
 */
function _islandora_bibliography_remove_pid_from_database($pid, $uid) {
  db_query('DELETE FROM {islandora_bibliography} WHERE pid = "%s" AND uid = "%d"', $pid, $uid);
}

/**
 * Stores the PID in the Session.
 *
 * @param string $pid
 *   The citations object's pid.
 */
function _islandora_bibliography_remove_pid_from_session($pid) {
  unset($_SESSION['islandora_bibliography'][$pid]);
}

/**
 * An internal function not mean to be called from outside this module.
 *
 * @param string $pid
 *   The citations object's pid.
 * @param int $uid
 *   The user who is has stored the $pid.
 *
 * @return boolean
 *   TRUE if the $pid is stored in the database, FALSE otherwise.
 */
function _islandora_bibliography_is_pid_in_database($pid, $uid) {
  $query = db_query('SELECT count(id) FROM {islandora_bibliography} WHERE pid = "%s" AND uid = "%d"', $pid, $uid);
  return (db_result($query) > 0) ? TRUE : FALSE;
}

/**
 * Stores the PID in the Session.
 *
 * @param string $pid
 *   The citations object's pid.
 */
function _islandora_bibliography_is_pid_in_session($pid) {
  if (isset($_SESSION['islandora_bibliography'][$pid])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * An internal function not mean to be called from outside this module.
 *
 * @param string $pid
 *   The citations object's pid.
 * @param int $uid
 *   The user who is has stored the $pid.
 *
 * @return boolean
 *   TRUE if the $pid is stored in the database, FALSE otherwise.
 */
function _islandora_bibliography_get_citations_from_database($uid) {
  $output = array();
  $query = db_query('SELECT pid FROM {islandora_bibliography} WHERE uid = "%d"', $uid);
  while ($row = db_fetch_array($query)) {
    $output[] = $row['pid'];
  }
  return $output;
}

/**
 * Gets the stored citations from the $_SESSION.
 *
 * @return array
 */
function _islandora_bibliography_get_citations_from_session() {
  $_SESSION['islandora_bibliography'] = isset($_SESSION['islandora_bibliography']) ? $_SESSION['islandora_bibliography'] : array();
  return $_SESSION['islandora_bibliography'];
}

/**
 *
 * @param array $pids
 * @param array $context 
 */
function _islandora_bibliography_batch_combine_mods($filename, $pid, array &$context) {
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  $mods = new DOMDocument();
  $mods->load($filename);
  $item = new Fedora_Item($pid);
  if ($item->exists() && isset($item->datastreams['MODS'])) {
    $datastream = $item->get_datastream_dissemination('MODS');
    $datastream = trim($datastream);
    if (!empty($mods)) {
      $doc = new DOMDocument();
      $doc->loadXML($datastream);
      $node = $mods->importNode($doc->documentElement, TRUE);
      $mods->documentElement->appendChild($node);
      $mods->save($filename);
    }
  }
}

/**
 * 
 * @param array $pids
 * @param string $redirect
 * @param array $context 
 */
function _islandora_bibliography_convert_mods_to_ris($filename, $redirect, array &$context) {
  $context['results']['file'] = bibutils_mods_file_to_ris_document($filename);
  $context['results']['redirect'] = $redirect;
}

/**
 *
 * @param boolean $successful
 * @param array $results
 * @param array $operations 
 */
function _islandora_bibliography_export_citations($successful, array $results, array $operations) {
  $_SESSION['bibliography']['export']['file'] = $results['file'];
  $_SESSION['bibliography']['export']['redirect'] = $results['redirect'];
}

/**
 *
 * @param array $pids
 * @param type $style
 * @param string $file_format 
 *   Either pdf, rtf, ris, if null display to screen.
 */
function islandora_bibliography_export_citations(array $pids, $style, $file_format = NULL) {
  $operations = array();
  switch ($file_format) {
    case 'RIS':
      $temp_file_dir = file_directory_temp();
      $temp_file = file_create_filename("mods.xml", $temp_file_dir);
      $mods = new DOMDocument();
      $mods->loadXML('<modsCollection xmlns="http://www.loc.gov/mods/v3" />');
      $mods->save($temp_file);
      foreach ($pids as $pid) {
        $operations[] = array('_islandora_bibliography_batch_combine_mods', array($temp_file, $pid));
      }
      $operations[] = array('_islandora_bibliography_convert_mods_to_ris', array($temp_file, $_GET['q']));
      break;
    case 'RTF':
      
      break;
    case 'PDF':
      
      break;
  }
  if (count($operations) > 0) {
    $batch = array(
      'title' => t('Exporting File'),
      'operations' => $operations,
      'finished' => '_islandora_bibliography_export_citations'
    );
    batch_set($batch);
  }
}

/**
 * Stores the given citation.
 *
 * @param string $pid
 *   The citations object's pid.
 *
 * @return boolean
 *   TRUE if successful, FALSE otherwise.
 */
function islandora_bibliography_store_citation($pid, $uid = NULL) {
  $uid = _islandora_bibliography_get_uid($uid);
  if (islandora_bibliography_is_citation_stored($pid, $uid)) {
    return FALSE;
  }
  else {
    return (_islandora_bibliography_is_user_anonymous($uid)) ?
        _islandora_bibliography_store_pid_in_session($pid) :
        _islandora_bibliography_store_pid_in_database($pid, $uid);
  }
}

/**
 * Checks to see if the given citation is stored by the given user.
 *
 * @param string $pid
 *   The citations object's pid.
 * @param int $uid
 *   The user to check.
 *
 * @return boolean
 *   TRUE if the citation is stored, FALSE otherwise.
 */
function islandora_bibliography_is_citation_stored($pid, $uid = NULL) {
  $uid = _islandora_bibliography_get_uid($uid);
  return (_islandora_bibliography_is_user_anonymous($uid)) ?
      _islandora_bibliography_is_pid_in_session($pid) :
      _islandora_bibliography_is_pid_in_database($pid, $uid);
}

/**
 * Removes the given citation.
 *
 * @param string $pid
 *   The citations object's pid.
 * @param int $uid
 *   The user who is removing the $pid.
 */
function islandora_bibliography_remove_citation($pid, $uid = NULL) {
  $uid = _islandora_bibliography_get_uid($uid);
  _islandora_bibliography_is_user_anonymous($uid) ?
          _islandora_bibliography_remove_pid_from_session($pid) :
          _islandora_bibliography_remove_pid_from_database($pid, $uid);
}

/**
 * Gets all stored citation for the given user.
 *
 * @param int $uid
 *   The user whose citations this function will retrieve.
 */
function islandora_bibliography_get_citations($uid = NULL) {
  $uid = _islandora_bibliography_get_uid($uid);
  return (_islandora_bibliography_is_user_anonymous($uid)) ?
      _islandora_bibliography_get_citations_from_session() :
      _islandora_bibliography_get_citations_from_database($uid);
}